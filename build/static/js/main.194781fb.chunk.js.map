{"version":3,"sources":["services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","type","className","Info","person","filter","deleteInfoOf","filterLength","length","name","slice","key","number","onClick","Filter","onChange","value","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setNewFilter","setMessage","msgType","setMsgType","getPeople","personService","useEffect","e","target","onSubmit","console","log","preventDefault","nameObject","map","includes","window","confirm","existingPerson","find","p","setTimeout","catch","error","concat","i","err","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.194781fb.chunk.js","sourcesContent":["/*\r\nThis module returns an object that has three functions as its properties that deal with notes (getAll, create, update)\r\n*/\r\n\r\nimport axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data) \r\n}\r\n\r\n// Create function in service object to delete a person \r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request\r\n}\r\n\r\n// Name of key and assigned variables are the same so shortenable to below.\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { getAll, create, update, deletePerson }","import React from 'react'\r\n\r\nconst Notification = ({ message, type }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n\r\n    if (type === 'success') {\r\n        return (\r\n            <div className=\"message\">\r\n                {message}\r\n            </div>\r\n            )\r\n    } else {\r\n        return (\r\n            <div className=\"error\">\r\n              {message}\r\n            </div>\r\n          )\r\n    }\r\n  \r\n    \r\n  }\r\n\r\nexport default Notification","import React, { useEffect, useState } from 'react'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst Info = ({person,filter,deleteInfoOf}) => {\n\n  const filterLength = filter.length\n  const matchBool = person.name.slice(0,filterLength) === filter\n  \n  if(matchBool) {\n    return <div key={person.name}><p>{person.name} {person.number} <button onClick={deleteInfoOf}>Delete</button></p></div>\n  } else {\n    return\n  }\n}\n\nconst Filter = ({filter, onChange}) => {\n  return (\n    <div>\n     <input value={filter} onChange={onChange}/> \n  </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setNewFilter ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ msgType, setMsgType ] = useState('success')\n\n  // Get the current entries\n  const getPeople = () => {\n    personService\n      .getAll()\n      .then(response => {\n        //console.log(` This is the GET response: ${response}`)\n        setPersons(response)\n      })\n  }\n\n  useEffect(getPeople, [])\n\n  // event handler for form \n  const addInfo = (e) => {\n    console.log(\"addInfo called!\")\n    e.preventDefault()\n    const nameObject = {\n      name: newName,\n      number: newNumber,\n    }\n\n    // If person already exists, update the phonebook instead \n    if(persons.map(person => person.name).includes(nameObject.name)) {\n\n      if(window.confirm(`${nameObject.name} already exists in the phonebook. Updating their number to ${nameObject.number} if OK.`)) {\n        let existingPerson = persons.find(p => p.name === nameObject.name)\n        personService\n          .update(existingPerson.id, nameObject)\n          .then(response => {\n            setPersons(persons.map(person => person.name !== existingPerson.name ? person : response))\n            setMsgType('success')\n            setMessage(\n              `The number for ${nameObject.name} was successfully updated!`\n            ) \n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n            \n          })\n          .catch(error => {\n            setMsgType('error')\n            setMessage(\n              'The person you are trying to update in the phonebook does not exist.' \n            )\n            setTimeout(() => {\n              setMessage(null) \n            }, 5000)\n            console.log(error)\n          })\n        }\n\n    } else {\n        // set name\n        personService\n          .create(nameObject)\n          .then(response => {\n            setPersons(persons.concat(response))\n            setNewName('')\n            setNewNumber('')\n            setMsgType('success')\n            setMessage (\n              `${nameObject.name} was successfully added to the phonebook!` \n            ) \n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setMsgType('error')\n            setMessage(error.response.data.error)\n            console.log(error.response.data.error)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n        }\n    }\n\n  // Deletion event\n  const deleteInfo = (id) => {\n\n    console.log(id)\n\n    if (window.confirm(\"Do you want to delete this person from your phonebook?\")) {\n      personService\n        .deletePerson(id)\n        .then(response => {\n          // retrieve new list of people after deletion and reset state to re-render info component\n          getPeople()\n          console.log('Person deleted') \n        })\n        .catch(err => {\n          console.log(`Deletion failed: ${err}`)\n        })\n    } else {\n      return\n    }\n\n    }\n  \n\n  // name input event handler\n  const handleNameChange = (e) => {\n    console.log(e.target.value)\n    setNewName(e.target.value)\n  }\n\n  // phone number input event handler \n  const handleNumberChange = (e) => {\n    console.log(e.target.value)\n    setNewNumber(e.target.value)\n\n  }\n\n  // handle filter changes \n  const handleFilterChange = (e) => {\n    setNewFilter(e.target.value)\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <Notification message={message} type={msgType}/>\n        <Filter filter={filter} onChange={handleFilterChange}/>\n      <h3>Add a new entry</h3>\n      <form onSubmit={addInfo}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/> <br></br>\n          number: <input value={newNumber} onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n        {persons.map((person, i) =>\n          <Info person={person} filter={filter} key={i} deleteInfoOf = {() => deleteInfo(person.id)}/>\n        )}\n      \n      \n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}